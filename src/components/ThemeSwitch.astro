---
import IMac from "./icons/IMac.astro";
import Sun from "./icons/Sun.astro";
import Moon from "./icons/Moon.astro";

const themes = ["System", "Light", "Dark"];
---

<div class="relative mx-1">
  <button
    transition:persist
    id="theme-toggle-btn"
    class="appareance-none border-none flex transition text-neutral-500 dark:text-neutral-400 hover:text-neutral-900 dark:hover:text-white"
  >
    <span class="sr-only">Choose a theme</span>
    <IMac id="system" class="size-6 theme-toggle-icon" />
    <Sun id="light" class="size-6 absolute theme-toggle-icon" />
    <Moon id="dark" class="size-6 absolute theme-toggle-icon" />
  </button>
  <div
    id="themes-menu"
    class="absolute hidden bottom-8 left-0 min-w-20 p-1 text-sm border rounded-md text-neutral-200 dark:text-neutral-600 border-neutral-300/50 dark:border-neutral-600/40 bg-neutral-900 dark:bg-white shadow-md"
  >
    <ul>
      {
        themes.map((theme) => (
          <li class="themes-menu-option px-2 py-1.5 cursor-default rounded-md hover:bg-neutral-400 transition">
            {theme}
          </li>
        ))
      }
    </ul>
  </div>
</div>

<style>
  #themes-menu.open {
    display: inline;
    animation: scale-up-center 0.15s cubic-bezier(0.25, 0.46, 0.45, 0.94) both;
  }

  @keyframes scale-up-center {
    from {
      transform: scale(0.8);
      opacity: 0;
    }

    to {
      transform: scale(1);
      opacity: 1;
    }
  }
</style>

<script is:inline>
  const matchMedia = window.matchMedia("(prefers-color-scheme: dark)");
  const themesMenu = document.getElementById("themes-menu");

  const getThemePreference = () => {
    if (typeof localStorage !== "undefined") {
      return localStorage.getItem("theme") ?? "system";
    }

    return window.matchMedia("(prefers-color-scheme: dark)").matches
      ? "dark"
      : "light";
  };

  const updateIcon = (themePreference) => {
    document.querySelectorAll(".theme-toggle-icon").forEach((element) => {
      element.style.scale = element.id === themePreference ? "1" : "0";
    });
  };

  const updateTheme = () => {
    const themePreference = getThemePreference();
    const isDark =
      themePreference === "dark" ||
      (themePreference === "system" && matchMedia.matches);

    updateIcon(themePreference);
    document.documentElement.classList[isDark ? "add" : "remove"]("dark");
  };

  updateTheme();

  matchMedia.addEventListener("change", updateTheme);

  document.addEventListener("click", () => themesMenu.classList.remove("open"));

  document.getElementById("theme-toggle-btn").addEventListener("click", (e) => {
    e.stopPropagation();
    const isClosed = !themesMenu.classList.contains("open");
    themesMenu.classList[isClosed ? "add" : "remove"]("open");
  });

  document.querySelectorAll(".themes-menu-option").forEach((element) => {
    element.addEventListener("click", (e) => {
      localStorage.setItem("theme", e.target.innerText.toLowerCase().trim());
      updateTheme();
    });
  });
</script>
